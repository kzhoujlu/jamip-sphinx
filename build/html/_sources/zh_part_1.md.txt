# JAMIP简介

**JAMIP** (Jilin Artificial-intelligence aided Materials-design Integrated Package) 是由吉林大学张立军课题组开发的人工智能辅助、数据驱动的材料设计集成软件包。软件包为满足材料基因工程与材料信息学的研究需求设计，涵盖半导体材料、介电材料、金属材料等材料体系，为基于功能材料大数据与人工智能机器学习算法结合的新材料发现和设计提供工具支撑。

课题组在发展的基于大规模高通量材料计算框架的材料设计方法基础之上，深度结合数据管理、分析及存储技术与机器学习数据挖掘算法，解决了系列材料信息学研究面临的关键技术难题，开发了拥有自主知识产权的材料设计集成软件包JAMIP。JAMIP软件包受中国版权局的保护，注册号是2017SR514752和2021SR0349238。软件包主体使用Python语言开发，代码开源，供国内外同行在签订版权协议的条件下免费使用。

软件包主体框架包含以高通量材料计算为核心的数据产生，数据收集、管理工具及数据存储，机器学习/数据挖掘功能模块。各部分之间高度融合，为高效产生、分析、管理和学习计算材料大数据，进而开展新材料设计与发现研究提供专业操作化软件平台。

i. 以高通量材料计算为核心的数据产生：

JAMIP具有强大的材料制造工坊，包含便于开展高通量材料计算的结构原型数据库（版权注册号2019SR1060756），仍在不断发展中的结构操作方法集（可方便快捷构建缺陷、表面、晶界、异质结等复杂材料结构），为批量产生用于大规模高通量材料计算的材料结构提供了工具基础。JAMIP集成的高通量第一性原理计算引擎（支持VASP、Quantum Espresso等计算软件）可针对批量生成的材料结构进行高度自动化的计算模拟。软件集成的自动化任务递交、监控、纠错模块为计算任务的高效、顺利完成提供保障。以下列出当前JAMIP版本支持的材料性质计算流程模块（以VASP程序为例）：

*   自洽场计算与结构优化；
*   热力学性质：分解焓，Convex hull，Triangle zone；
*   电子结构：能带结构，电子态密度，总及部分电荷密度，成键轨道分析、形变势、电荷布居分析等；
*   力学性质：弹性模量，体模量，形变势，泊松比等；
*   光学性质：光吸收谱计算，介电函数，激子结合能，太阳能电池理论转换效率、非线性二次谐波成像等；
*   声子与热学性质：声子谱及声子态密度，软模相变，gruneisen常数、热导率等；
*   电输运性质：载流子有效质量，载流子迁移率；
*   其他性质：XRD图谱，径向分布函数，容差因子及八面体因子(钙钛矿结构)

我们正致力于不断扩展以上材料性质计算流程模块，涵盖更多功能材料体系的性质，为实现功能导向的材料设计提供有效计算工具支撑。

ii. 数据收集、管理工具及数据存储：

JAMIP集成了针对不同类别的功能材料，对高通量第一性原理计算结果的自动化数据提取、分析工具。针对材料信息学的材料大数据特点，集成了以Django框架为基础的数据库平台接口，支持MySQL，Sqlite3，postgresql等多种主流数据库管理语言。数据库系统实现使用环境的纯Python化，用户无需学习复杂的结构化查询语言（SQL），即可在多种平台上对特定研究课题的计算数据进行存储，共享与快速检索。目前数据收集、管理工具及数据存储模块支持以下功能：

*   高通量计算数据自动提取；
*   计算数据分析工具、绘图工具；
*   计算数据的自动存储到数据库；
*   数据库的便捷数据查询与导出

iii. 机器学习/数据挖掘模块：

在JAMIP当前版本中，我们集成了数据前处理，数据特征工程，以及常用机器学习算法的模型构建和性能评估子模块。用户可根据训练和测试数据集的特征，选择合适的机器学习算法开展机器学习研究，探索材料性质与结构之间的内在关系、不同性质之间的关联、主导材料高性能化的物理规律，进而开展新材料设计。
目前机器学习/数据挖掘模块支持以下功能：

*   数据预处理：数据清洗、类别特征编码；
*   特征工程：特征缩放、特征构造、特征选择；
*   机器学习模型构建及后处理、模型评估；
*   基于数据挖掘结果开展材料设计研究

如果想了解更多的关于JAMIP方法和程序，请参考以下文献:
++Xin-Gang Zhao, Kun Zhou, Bangyu Xing, Ruoting Zhao, et al., Yuhao Fu, Lijun Zhang, “JAMIP: an artificial-intelligence aided data-driven infrastructure for computational materials informatics”, arXiv:2103.07957 (2021)++

    (1) JAMIP: An Artificial-Intelligence Aided Data-Driven Infrastructure for Computational Materials Informatics. 
    Science Bulletin 2021, 66 (19), 1973–1985. https://doi.org/10.1016/j.scib.2021.06.011.

虽然JAMIP开发团队和现有用户已对JAMIP软件包进行了大量测试，但由于新功能的不断添加和算法的不断完善，程序中的bug在所难免。当您在使用过程中发现任何问题，请随时和我们联系，我们将非常高兴地接受所有用户提出的宝贵建议和批评。
如果发现程序中的bug，请通过电子邮件发送输入和输出文件的副本到JAMIP开发团队(<admin@jamip-code.com>)，感谢大家的理解与支持。

# 1. 软件安装及运行环境配置

当前JAMIP版本基于Linux环境开发、安装和运行，安装及运行环境配置步骤如下：

## 1.1 软件安装

#### 1.1.1 下载源代码并安装

在JAMIP软件主页<http://www.jamip-code.com）注册并签订版权协议，下载源码安装包[JAMIP-V1.1.tar.gz](http://jamip-code.com/download.html)
解压后执行：

    sh install.sh

JAMIP依赖的Python库将在用户机器联网状态下自动安装。使用Anaconda3等Python发行版可预先解决软件所需的大部分依赖。
以下是依赖的Python库：

*   [Python](https://www.python.org/) ≥ 3.7
*   [numpy](https://numpy.org/) ≥ 1.14
*   [matplotlib](https://matplotlib.org/) ≥ 2.1
*   [scipy](https://scipy.org/) ≥ 1.5.4
*   [scikit-learn](https://scikit-learn.org) ≥ 0.22
*   [Django](https://www.djangoproject.com/) = 3.1
*   [ruamel.yaml](https://yaml.readthedocs.io/en/latest/) ≥ 0.16
*   [spglib](http://spglib.github.io/spglib/)
*   [psutil](psutil.readthedocs.io/)
*   [jinja2](https://jinja.pocoo.org)

如果用户需要离线安装JAMIP，可按以下步骤安装：

    1. 在有网络连接的机器上下载Anaconda3
    2. 执行解压安装命令后，使用pip命令打包全部依赖库
    sh install.sh
    pip download -d package -r jamip.egg-info/requires.txt
    3. 将Anaconda3安装包，jamip安装包和上一步生成的依赖库上传至离线机器，解压后执行安装命令
    pip install --no-index --find-links=package -r jamip.egg-info/requires.txt
    sh install.sh

#### 1.1.2 环境变量初始化

在执行安装脚本时，程序将自动完成对基本环境的配置。
JAMIP需要在用户的家目录创建 `.jamip`文件夹，其中可执行程序的路径为：`$HOME/.jamip/bin`，安装时将自动在`~/.bashrc`内添加环境变量。

#### 1.1.3 程序安装测试

在终端输入jp指令正常执行：

    jp -h/--help

## 1.2 程序运行环境配置

初始安装JAMIP程序时，需要对高通量计算环境（集群参数、第一性原理计算的默认参数）和数据库做初始化的环境配置。所有配置文件都在`$HOME/.jamip/env`路径下。
在程序运行过程中，将基于上述目录下的默认配置文件，在计算目录下生成配置文件副本。建议用户在软件安装后首先查看及修改配置文件，避免因参数设置问题导致的程序运行错误。

#### 1.2.1 集群参数

在执行计算时，JAMIP默认会基于初始化的集群参数（任务管理系统信息、机器硬件信息）生成作业提交文件，实现跨集群的任务提交与管理。

JAMIP目前预置了三种作业管理系统的配置文件：PBS、LSF、SLURM，分别对应在 `$HOME/.jamip/env` 目录下的`pbs.yaml`, `lsf.yaml`，`slurm.yaml`。我们正在持续扩展对其他作业管理系统的支持。作业管理系统配置文件的格式如下（以PBS作业管理系统为例）：
**pbs.yaml**

    job_name: VASP.pbs   # 默认的提交任务名称
    manager: PBS         # 作业管理系统类型
    queue: batch         # 默认的提交队列名
    nodes: 1             # 使用的计算节点数
    cores: 36            # 单个计算节点使用的核数
    walltime: 12:00:00   # 任务最大运行时间
    cmd: qsub            # 提交任务的命令
    mpi: mpirun          # 并行任务的命令
    maximum: 10          # 提交队列中，默认的提交任务上限值（排队和计算中的任务）
    env:                 # 自定义程序执行所需的依赖库/编译器
    -  module load intel # 例如：加载intel编译器
    -  export PATH=~/anaconda3/bin:$PATH # 例如：添加Python环境变量

上述集群参数将传递到Jinja2模板中，生成作业提交文件。提交模板如下：

**pbs.template**

    #!/bin/bash
    #PBS -N {{ job_name }}
    #PBS -q {{ queue }}
    #PBS -l nodes={{ nodes }}:ppn={{ cores }}
    #PBS -l walltime={{ walltime }}
    #PBS -o {{ output }}
    #PBS -e .error

    cd $PBS_O_WORKDIR

    {% for line in env %}  # for循环输出环境变量
    {{ line }}
    {% endfor %}

    python3 {{ script }} {{ root }} {{ outdir }} {{ pool }} > .running
    # 可执行python文件 + 作业提交目录 + 作业计算目录 + 任务池

最终生成的作业提交脚本如下：
**submit.sh**

    #!/bin/bash               # shell路径
    #PBS -N VASP.pbs          # 任务名
    #PBS -q batch             # 队列名
    #PBS -l nodes=1:ppn=36    # 节点数：核数
    #PBS -l walltime=12:00:00 # 程序最大运行时间
    #PBS -o .output           # 作业标准日志输出到 .output
    #PBS -e .error            # 作业异常信息输出到 .error
     
    cd $PBS_O_WORKDIR         # 切换目录到提交目录 

    module load intel         # 加载程序执行所需的依赖库/编译器
    export PATH=$HOME/anaconda3/bin:$PATH
     
    python $JAMIP_PYTHONPATH/manager.py $SUBMIT_dir $JOB_dir NAME.dat  > .running

**备注：**
在执行`jp -r prepare`命令后，如果当前目录下不存在集群配置文件`.cluster`，JAMIP将根据默认路径下（`$HOME/.jamip/env`）的集群配置文件生成文件副本。确认配置文件生成后，JAMIP将测试作业提交模板所需的参数是否完整提供，若存在缺少参数将通过屏幕日志的方式进行提醒。
在后续任务提交和程序运行期间，JAMIP将从该配置文件加载所需的集群参数。
JAMIP允许用户自由修改提交模板和配置文件，以支持在任意作业管理系统上提交任务和扩展功能。如果您想了解更多作业管理系统的配置方法和管理模块，请参阅集群管理模块。

#### 1.2.2 高通量计算默认参数

当用户使用DFT程序计算一组材料的性质时，通常会基于固定的流程和计算参数。\
JAMIP为常用的计算任务提供了一套稳健的计算流程，默认的任务计算参数储存在`$HOME/.jamip/env`目录下，如`vasp.yaml`（用于VASP）、`qe.yaml`（用于QE）。用户可以根据实际计算需求，修改特定任务的初始化参数。以VASP的计算任务为例：

**vasp.yaml**

    base:
       system: jamip
       ismear: 0
       sigma: 0.05
       algo: fast
       npar: 4
    relax:
       addgrid: true
       nelm: 5
    scf:
       lcharg: true
       lwave: true
    dos:   
       lwave: false
       ismear: -5
       nedos: 3001
       lorbit: 11

JAMIP目前支持的第一性原理计算软件有：VASP和 Quantum Espresso。我们正在更新对其他主流计算软件和程序的支持。
**备注：**
在执行 `jp -r prepare`命令来生成计算的任务池后，JAMIP将在当前目录下生成/更新任务计算参数的文件副本`.incar`。在程序运行期间，JAMIP将从该副本文件中加载计算参数。用户可以通过修改此文件，实现动态地修改本次计算参数。
在修改`.incar`文件时，尽量简化参数设置，避免因重复设置参数而导致的计算参数遗忘或更新混乱 (详细信息见 [DFT参数设置](#dft参数))

**下面列出了计算参数文件中通用的key值：**

    base：        默认参数集，各任务的incar均在此基础上更新
      
    计算任务部分：
    relax:        结构优化参数
    scf:          自洽计算参数
    band:         能带计算参数
    dos:          态密度计算参数
    force:        力常数计算参数
    optics:       含频介电常数参数
    hse_gap:      hse修正带隙计算
      
    交换关联泛函部分：
    soc:          自旋轨道耦合计算参数
    hse:          杂化泛函参数
    gw:           gw参数
    ldau:         lda+U参数

#### 1.2.3 数据库参数

JAMIP中的数据库是以Django框架为基础开发的，数据库系统实现了使用环境的纯Python化，用户无需学习复杂数据库编程方法和结构化查询语言（SQL），通过调用JAMIP程序内部方法，就能完成对数据库中数据的更新维护及查询操作。JAMIP数据库支持多种主流关系型数据库后端，如 MySQL，MariaDB，Sqlite3，Oracle，PostgreSQL。

在使用数据库相关功能前，用户需要先完成数据库初始化和Django的参数配置工作。\
目前，JAMIP支持自动配置MySQL和Sqlite3数据库，数据库配置文件保存在 `~/.jamip/env/django.json`\
如果您是轻量级用户，推荐您使用Python环境自带的Sqlite3数据库。下面列出初始化数据库的相关命令：

    jp --django mysql           # 配置MySQL参数，交互式输入数据库名称、登陆等信息
    jp --django sqlite          # 配置Sqlite3参数，默认数据库生成路径为代码包的db目录下
    jp --django makemigrations  # 数据库迁移--生成迁移文件
    jp --django migrate         # 数据库迁移--同步到数据库

# 2. 快速使用指南

JAMIP的核心命令行工具为：`jp`。用户可以通过该命令，与JAMIP进行交互 (完整的jp命令介绍请参阅：jp命令介绍)

本章以单晶硅(空间群号：227)的VASP能带计算为例，展示如何使用jp命令进行如下操作：文件准备、参数配置、任务提交、任务检查、以及数据处理等一般计算流程。

## 2.1 高通量计算任务输入文件准备

首先，用户需要先完成以下准备工作：

1.  准备VASP可执行程序，确认运行所需的环境变量
2.  准备完整的VASP赝势库，用于JAMIP程序自动生成赝势
3.  待计算的结构文件(以单晶硅为例)，输入文件的格式可以是vasp、cif、qe等

#### 2.1.1 任务控制文件

JAMIP通过Python文件(`input.py`)设置计算任务的主要参数。程序将根据`input.py`内的设置的参数生成计算类。可通过`jp -i vasp` 命令生成`input.py`文件，示例如下(更为详细的信息请参阅：[input参数设置]())：

```python
from jamip.abtools.vasp.setvasp import SetVasp
from jamip.compute.prepare import Prepare
 
def jamip_input(name=None,*args,**kwargs):
     vasp=SetVasp()                            # 初始化SetVasp类
     vasp.program = '/install_path/vasp_std'   # vasp程序路径
     vasp.potential = '/install_path/paw_pbe'  # vasp赝势目录
     vasp.tasks = 'relax scf band'             # vasp计算任务列表
     
     vasp.xc_func = 'pbe'      # vasp计算使用的参数集
     vasp.force = 1e-2         # vasp计算的力收敛标准，对应EDIFFG = -1e-2
     vasp.energy = 1e-6        # vasp计算的能量收敛标准，对应EDIFF = 1e-6
     vasp.cutoff = 1.3         # vasp计算的截断能，支持两种设置方式：1)直接设置截断能值，如：520
                               # 2) POTCAR中全部ENMAX中最大值的倍数，如：1.3 (即：ENCUT=1.3*ENMAX)
     vasp.kpoints = 0.25       # vasp计算使用的K点类型，0.25表示采用：KSPACING = 0.25
     
     pool=Prepare.pool(vasp)   # 初始化Prepare类
     pool.set_structure('input','output') # 设置计算的输入和输出目录
     pool.set_extra()          # 生成.extra文件，可选功能
     # 在此示例中，input为输入结构文件目录， output为计算输出目录
     pool.save('Silicon.dat')  # 保存任务池，任务池名为'Silicon.dat'
     Prepare.cluster('pbs')    # 生成/更新.cluster文件，可选(pbs/lsf/slurm)
     Prepare.incar(vasp)       # 生成/更新.incar文件，根据计算任务添加参数字典
     Prepare.links(vasp)       # 生成.link文件，初始化计算任务间的依赖关系
```

**备注：**
进行批量计算时，需要将结构文件保存在同一目录下。在生成任务池时，JAMIP程序将从该目录统一读取结构。以上面的文件为例，用户需要将所有结构文件保存到`input`文件夹内。
用户需要为结构文件设置正确的后缀，目录内出现无法识别的文件将导致结构读入失败。
结构文件名将用于后续的计算目录、批量绘图等的命名。

#### 2.1.2 本地配置文件

JAMIP采用在任务提交目录下生成配置文件副本的方式，方便用户在计算时根据任务类型自由设置使用的计算参数和计算资源。
在正式任务提交前，建议用户对下列配置文件进行检查：

*   `.incar` 用于设置批量VASP计算的INCAR控制参数（以VASP计算为例）；
*   `.cluster` 用于设置批量计算使用的集群参数；
*   `.extra` 用于设置针对特定结构的参数，如计算磁性结构、铁电极化、激发态等；
*   `.link` 用于设置计算任务间的依赖关系
    **备注：**

1.  当前目录不存在配置文件时，执行`jp -r prepare`后，JAMIP将基于`$HOME/.jamip/env`下的默认模板生成配置文件；
    如果已经存在本地配置文件，执行`jp -r prepare`，JAMIP将对现有配置文件进行检查并更新。
2.  `.extra`文件仅在特定计算任务中生效，详细信息见：补充参数设置

在完成准备工作后，提交目录下应当包含如下文件：

    |-- input.py # 任务控制文件
    |-- .incar   # 计算参数配置文件
    |-- .cluster # 集群参数配置文件
    |-- .extra   # 补充参数配置文件
    `-- Input    # 结构文件目录
       |-- Si.vasp # 结构文件
       `-- ...

## 2.2 高通量计算任务提交

JAMIP通过任务池文件实现对任务的管理和批量自动化提交，以下是提交使用的命令

    jp -r prepare        # 根据input.py，在当前目录下生成任务池
    jp -r qsub -f Silicon.dat # 提交任务池<Silicon.dat>中的任务

**备注：**

1.  执行任务提交命令后，JAMIP将向作业管理系统提交若干任务，单次提交的任务数由`.cluster`内的`maximum`参数决定(默认为10)
2.  JAMIP程序将在上一任务完成后，自动从任务池中提交新的任务，维持计算队列中的任务总数不变
3.  任务提交后，后续程序的运行依赖于任务池文件和同目录下的配置文件，请不要在计算完成前删除或修改任务池。

提交任务后的目录结构：

    |-- input.py         # 任务提交脚本
    |-- input            # 结构文件目录
    |  `-- Si.vasp       # 结构文件
    |-- Silicon.dat      # 任务池
    |-- .cluster         # 集群配置文件
    |-- .incar           # INCAR配置文件
    |-- .link            # 任务依赖配置文件
    `-- output           # 计算总目录
       `-- Si.vasp       # 计算目录
          |-- relax      # 结构优化计算目录
          |  |-- S0      # 分步优化，S0为粗优化
          |  `-- S1      # 分布优化，S1为第一步标准优化
          |-- scf        # 自洽计算目录
          `-- electric   # 电子结构目录
              `-- band   # 能带计算目录

## 2.3 任务状态监控与检查

JAMIP提供了多种输出日志，用户可以从日志中获取任务的详细信息。以下日志文件都存储在计算任务的根目录中：

*   **实时输出：**
    `.status` 记录任务的完成状态
    `jamip.log` 累积记录当前目录的任务运行信息
*   **计算完成后由作业管理系统输出：**
    `.output` 作业标准输出信息
    `.error`  作业标准报错信息

用户可以使用`jp`命令查询任务池中所有任务的计算状态统计：

    $ jp -c show -f Silicon.dat # show命令查看当前任务池的完成状态
    +--------+-------+--------+-------+-------+----------------+
    | job_id | prior | status |  scf  | relax |      path      |
    +--------+-------+--------+-------+-------+----------------+
    | 203764 |   9   |    C   | True  |  True | OUTPUT/Si.vasp |
    +--------+-------+--------+-------+-------+----------------+

    # 表格信息说明 ：
    > job_id : 在作业管理系统中的任务号; 
    > prior : 任务优先级（依赖于自重启计算次数，自重启计算次数越多优先级越低）; 
    > status : 任务运行状态; W 代表任务未提交；R 代表任务已提交，尚未结束；C 代表任务正常结束；
    > relax/scf ：各个子任务的完成状态; 
    > path ：任务计算路径（基于提交目录的相对路径）

**备注：**
查询表格中的`status`仅表示JAMIP对任务完成信息的记录，实际运行情况以作业管理系统的查询结果为准。
如果一个任务持续保持R状态，说明其在运行过程中意外退出，用户可以进入该任务的计算目录，从`.error`文件中获取该任务报错信息。

**任务状态文件 .status ：**

    relax/S1:          # 任务计算路径，状态字典的主键
     task: relax       # task: 任务名称
     finish: true      # finish：计算是否完成(vasp程序正常结束)
     success: true     # success: 任务是否完成(收敛或正确输出文件)
     electronic: true  # electronic：电子步收敛
     force: 0.0057     # force：晶格力收敛
     ionic: true       # ionic：离子步收敛
    scf:
     task: scf         # scf任务状态
     finish: true 
     success: true
     electronic: true
    electric/band:
     task: band        # band任务状态
     finish: true
     success: true

## 2.4 数据提取与处理

#### 2.4.1 数据提取与存储

JAMIP的数据处理主要依靠内部的Python提取模块实现，运行`jp`命令可以在终端内实现部分功能，用户也可以基于相关模块手动构建数据提取脚本。详细信息请参阅：`jamip.analysis`代码说明文档。

**使用`jp -o`命令可以在命令行环境快速查看数据，例如：**

    $ jp -o bandgap free_energy emass # 提取并输出统计数据
    +---------+---------+----------+-------------+--------+--------+
    |   path  | bandgap | isdirect | free_energy | H-mass | e-mass |
    +---------+---------+----------+-------------+--------+--------+
    | Si.vasp |  0.7041 |  False   | -43.380448  | 1.013  | 0.287  |
    +---------+---------+----------+-------------+--------+--------+
     
    $ jp -o csv bandgap free_energy emass # 提取并以csv格式输出数据
    ---------------------- 文件分割线 -------------------------
    format,bandgap,isdirect,free_energy,H-mass,e-mass
    Si.vasp,0.7041,False,-43.38044857,1.013,0.287

使用功能化函数提取数据，例如提取vasp计算的能带数据

    # 提取vasp计算的能带数据
    from jamip.analysis.vasp import BandFinder
    path = '/home/jamip-test/ICSD/CsPbI3.vasp' # 计算目录
    bf = BandFinder(path).get_data()           # 实例化类
    banddata = bf.bands                        # 获取能带数据
    kpoints = bf.kpoints                       # 获取K点坐标数据

#### 2.4.2 利用数据绘图

JAMIP以Python脚本的形式提供常用的绘图功能，用户可以使用绘图脚本为一组计算批量绘图。
执行`jp -i plot`命令生成绘图脚本，代码如下：

    from jamip.utils.plot import globalvar as gl

    gl.band.emin = -1
    gl.band.emax = 3
    gl.band.xlabel = ''
    gl.band.ylabel = 'Energy (eV)'

    if __name__ == '__main__':
        from jamip.utils.plot import Plot
        pl = Plot(path='./')  # 设置绘图使用的路径
        
        # 设置需要绘制的图像(组合图)
        pl.plots('fatband')   
        
        # 设置需要绘制的图像、路径和参数(单图)，以下两种方法等价
        pl.plot('dos', path='./')    #
        pl.plot_band(path='./',fname='band.png') 

代码包含全局变量设置和绘图功能调用两部分，通过设置全局变量，用户可以调整绘图区间、标题内容等参数。
为方便用户修改，JAMIP令相同类型的绘图任务使用同一组全局变量，任务类型如下：

| 类型     | 绘图功能                                                 |
| ------ | ---------------------------------------------------- |
| band   | band, fatband, hseband, unfolding, phband, gruneisen |
| dos    | dos, spdos, cohp, phdos                              |
| absorb | absorb, dielectric, shg                              |
| base   | converge, softmode, tdm                              |

**可设置的变量：**

| 变量名     | 变量类型  | 介绍      |
| ------- | ----- | ------- |
| emax    | float | 能量区间最大值 |
| emin    | float | 能量区间最小值 |
| limit   | float | 态密度区间上限 |
| scissor | float | 剪刀算符    |
| title   | str   | 图像标题    |
| xlabel  | str   | 图像x轴标签  |
| ylabel  | str   | 图像y轴标签  |

**支持的绘图功能：**

    电子结构相关：
    band: 能带
    fatband: 投影能带 
    dos: 态密度
    absorb： 光吸收谱
    dielectric: 介电函数
    unfolding: 能带反折叠
    hseband： 杂化泛函能带
    tdm: 跃迁矩阵元
    cohp: 成键轨道分析
     
    phonopy相关：
    phband: 声子谱
    phdos: 声子态密度
    gruneisen: Gruneisen常数
    thermal: 热膨胀系数
    softmode: 软膜相变
     
    光谱相关：
    xrd: x射线衍射
    ir_spectrum: 红外光谱
    raman_spectrum: 拉曼光谱
     
    其他：
    convex_hull: 二元相图分析
    triangle_zone: 三元相图分析

对于其他绘图属性的设置，例如画布尺寸、字体大小、线宽等，JAMIP基于Matplotlib包的样式表实现，相关配置文件存储在：`$HOME/.jamip/viewer/`。

与上面全局变量的调用方式类似，用户可通过修改目录下绘图功能对应的配置文件`xxx.mplstyle`，进行绘图参数的调整。详细的文件配置方法可参考[matplotlib官网](https://matplotlib.org/stable/tutorials/introductory/customizing.html)。

**基础绘图样式表：** `$HOME/.jamip/viewer/base.mplstye`

    figure.dpi: 72
    figure.figsize: 10,7
    font.size: 18
    axes.titlesize: 25
    axes.labelsize: 24
    lines.linewidth: 2.5
    lines.markersize: 16
    xtick.labelsize: 20
    ytick.labelsize: 20

默认绘图样式（字体大小、线宽等）适用于长轴为10-14的画布，用户通常需要成比例的修改画布和内容大小。
在查找样式表文件时，JAMIP将按`job -> basejob -> base`的顺序查询可用的样式表，例如`hseband`任务将依次查询 `hseband.mplstyle`,`band.mplstyle`,`base.mplstyle`，用户可根据自身绘图习惯新建并修改样式表。

**备注：**
JAMIP支持用户绘制组合图，并根据绘图类型自动调整画布大小。以`band+dos+tdm`图为例：

    pl = Plot(path='output/Si.vasp')
    pl.plots('band','dos','tdm')

组合图默认保存为`banddostdm.png`，如下图所示：
![png](https://note.youdao.com/yws/api/personal/file/WEB587e23db24eb298b5a1e8537c1d7a45a?method=download\&shareKey=c0fbed5acea41ebafd7edf225382c3f4)

#### 2.4.3 数据挖掘研究

在利用高通量软件进行大规模材料计算的同时，如何充分利用计算过程产生的大量数据，从中挖掘出有价值的规律性认知，是材料信息学的研究的重点。
JAMIP数据库和机器学习包为材料计算的大数据分析提供了有力的工具，用户可以将海量的计算数据转化为机器学习可用的描述符集，并在需要时从数据库中提取并加以分析。下面介绍构建描述符集的基本方法。

    import os
    from jamip.db.connect import Read,Structure
    from jamip.ml.descriptorsSet.descriptorsSet import DescriptorsSetBuilder
     
    structures = []
    for file in os.listdir('TEST'):
     raw = Read(os.path.join('TEST',file)).run()
     s = Structure().create(raw, isPersist=False)
     structures.append(s)
    features = ['mass','natoms','volume','a','b','c','BX'] # 设置提取特征
     
    df=DescriptorsSetBuilder(structures).set_features(features) # 提取特征
    df.save('test.csv') # 将提取结果存入csv文件

