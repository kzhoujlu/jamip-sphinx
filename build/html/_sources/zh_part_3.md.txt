#### 3.4.2 StructureFactory类

结构工厂类中集成了大量常用的结构操作方法，通过对这些操作方法的进一步组合，可以实现复杂结构的构建。此外，这些方法中大部分都支持链式操作。以下对类中的方法进行简单介绍：

**注意：** 结构操作方法返回值均为类自身，需要调用其类属性structure获取结构操作后的结构对象。

**建议：** 在结构操作过程中，设置isUpdatedInfo和isPersist为False，可以提高程序的响应速度，并且可以避免将操作过程中产生的无用结构保存进数据库；在完成所有结构操作后，调用操作后得到的结构对象的update()方法，同步内存中内建数据结构中的数据，可以避免后续抛出一些异常情况。

**参数格式：** 结构操作方法的特定输入变量需要满足一定格式，在此进行约定：

*   **原子的标准格式化数组**，其格式为：\[元素名，坐标，坐标类型]，例如：
        ['Na', 0.1, 0.0, 0.0, 'Direct'] 
        ['Na', 5.234, 0.0, 0.0, 'Cartesian']
        ['Na', 0.1, 0.0, 0.0] (当坐标类型缺省时，默认坐标类型为分数坐标)
        其中元素名可用物种信息替代，例如：
        ['Na1+', 0.1, 0.0, 0.0, 'Direct']
        ['Na1+', 5.234, 0.0, 0.0, 'Cartesian']
*   **原子坐标或参考点坐标**，其格式为：\[坐标，坐标类型]，例如：
        [0.1, 0.0, 0.0, 'direct']
        [5.234, 0.0, 0.0, 'Cartesian']
        [0.1, 0.0, 0.0] (当坐标类型缺省时，默认坐标类型为分数坐标)
*   **方向向量或旋转轴向量**，其格式为\[向量，向量类型]，例如：
        [1, 0, 0, 'direct']
        [2.6, 2.6, 0, 'Cartesian']
        [1, 0, 0] (当坐标类型缺省时，默认坐标类型为分数坐标)
*   **旋转角**，其格式为\[角度，角度类型]，例如：
        [30, 'Degree']
        [0.2, 'Radian']

***structure***
类属性，获取结构类的当前结构对象

***raw\_structure***
类属性，获取结构类的初始结构对象

***zoom(scale, isPersist=False)***
晶格基矢缩放。

*   `scale: float` 放缩系数值
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***scale(direction, isPersist=False)***
对指定晶格基矢方向，进行晶胞的放缩。

*   `direction: list` 指定需要缩放的晶格基矢方向的系数
    其数据格式为：\[ *scale of a, scale of b, scale of c* ]，如：
        [0.9, 1, 1] (只压缩a方向0.9)
        [0.9, 0.9, 1] (压缩a和b方向0.9)
        [0.9, 0.9, 0.9] (三个方向都压缩0.9，等同于调用zoom(0.9))

*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***add\_atoms(atoms, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
在结构中增添多个原子。

*   `atoms: array-like` 包含原子信息的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，如：\[\[元素名，坐标，坐标类型], ... ]
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `isNormalizingCoordinate: bool, default: True`是否规范化原子的坐标，移除周期性，
    保证原子位于晶胞基矢表示的晶胞内部，如：分数坐标1.3将转化为0.3
*   `precision: float, default: 1e-3`检查过程中判定原子是否重叠的精度参数，单位为埃（Å）
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***del\_atoms(atoms, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
在结构中删除多个原子。

*   `atoms: array-like` 包含原子信息的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，如：\[\[元素名，坐标，坐标类型], ... ]
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***substitute\_atoms(atoms, symbol\_of\_elements, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
替换结构中的多个原子的元素类型。

*   `atoms: array-like` 包含原子信息的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，如：\[\[元素名，坐标，坐标类型], ... ]
*   `symbol_of_elements: string or list` 替换成的新元素名。如果全部需要替换的原子都换成同一种元素，可以仅指定一个元素类型。如：'Na'。否则，需要给出每个原子对应的新的元素名的列表数组，如：\[ *'Na', 'Na', 'Na'* ]。
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***center(direction, dtype\_of\_move='position', isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
按照给定的方向，移动结构中的原子，实现中心对齐。

*   `direction` 原子移动的方向向量，格式为：\[ *a, b, c* ]，
    如：`[1,0,0]` (沿a方向)、`[0,1,0]`(沿b方向)、`[0,0,1]`(沿c方向)
*   `type_of_move: {'position','mass'}, default: 'position'` 指定对齐方式。
    其中，'mass'为按质心对齐，'position'为以左右边界位置对齐
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***vacuum(direction, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
在指定方向增加真空层。

*   `direction: list`为沿着某个晶格矢量方向增加真空层的方向向量
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `isCenter: bool, default: True` 是否中心对齐结构
*   `distance: float, optional` 将结构中的所以原子沿着给定的方向移动指定的距离，单位为埃(Å)。
    注意：移动距离不能超过添加真空层之后的晶胞参数的长度，即不能将原子移动到晶胞之外
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***redefine(operator\_matrix, isPersist=False)***
利用给出的操作矩阵M，重新定义晶格，其转换关系为：`C'=C x M`。

*   `operator_matrix: int array-like of shape (3, 3)` 3x3的整数矩阵(M)，例如：`[[0,1,1], [1,0,1], [1,1,0]]`
    注意：晶胞体积要大于0，即M的行列式绝对值为正整数。
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***surface(hkl, maxindex=None, saxis='c', isPersist=False, \*\*kwargs)***
生成指定晶面的结构。

*   `hkl: array-like` 晶面的Miller指数，格式为\[h, k, l]，如\[1, 1, 0] （均为整数）
*   `maxindex: int` 搜索的晶格矢量的范围，默认值为hkl的最大值。低对称性结构在搜索正交晶矢时可能失败，需要用户手动修改maxindex。
*   `saixs: str, defaule: 'c'` 生成晶面在结构中对应的晶轴
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***standardize(isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
将当前结构转化为标准化结构。

*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度
*   `hall_number: int, default: 0` 霍尔符号。注意，如果该值为0，默认选取Seto网站列出的所有可选空间群列表中的最小序数对应的空间群结构。

***primitive(symprec=default\_constants.symprec.value, isPersist=False)***
获取原胞结构。

*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***conventional(symprec=default\_constants.symprec.value, isPersist=False)***
获取单胞结构。

*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中

***supercell(dim, isPersist=False, \*\*kwargs)***
获取超胞结构。

*   `dim: list` 需要扩胞的大小，格式为\[ *a, b, c* ]，如：\[2, 2, 2]
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***joint(jointed\_structure, direction, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
在给定的方向上，拼接两个晶体结构。注意：拼接时，传入的jointed\_structure结构，会对垂直拼接方向的横截面进行缩放，以使两个结构的横截面匹配。

*   `jointed_structure`拼接结构实例化对象。
*   `direction: list` 指定拼接的方向向量，格式为\[方向向量，方向向量类型] (注意：只能为'Direct')，例如：
          [ 1, 0, 0, 'Direct'] (拼接到a轴右侧)
          [-1, 0, 0, 'Direct'] (拼接到a轴左侧)
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***rotation(atoms, axis, theta, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
对选定的原子进行旋转操作。注意，如果不设置旋转的原点位置，默认的原点设置为坐标系的原点\[0, 0, 0]。

*   `atoms: array-like` 需要旋转的原子的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，其格式为：\[元素名，坐标，坐标类型];
*   `axis: list` 旋转轴向量，格式为\[向量，向量类型]。注：分子的旋转轴格式仅支持笛卡尔坐标。
*   `theta: list` 旋转角度，格式为\[角度，角度类型]，如：`[30, 'Degree']`，`[0.2, 'Radian']`
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度
*   `origin: list, optional` 旋转矢量的原点 (注意，它是旋转轴的原点，而不是轴上的一个点), 格式为\[坐标，坐标类型]，例如：
          [0.1, 0.0, 0.0, 'Direct']
          [0.1, 0.0, 0.0]
          [5.234, 0.0, 0.0, 'Cartesian']

***translation(atoms, direction, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
对选定的原子进行平移操作。

*   `atoms: array-like` 需要平移的原子的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，其格式为：\[元素名，坐标，坐标类型];
*   `direction: list`：平移方向向量，格式为\[坐标，坐标类型]
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***perturb(cutoff=0.1, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
对结构中的原子进行随机扰动。

*   `cutoff: float, default: 0.1` 扰动的截断距离，单位为埃(Å)
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

***constraint(self, atoms, isPersist=False, isConstraint_of_remainder=True, \*\*kwargs)***
对结构中的选择的原子进行固定(对应POSCAR的`selected dynamics`标签)

*   `atoms: array-like` 需要更新固定的原子的列表数组，数组的每个原子可以为以下形式：
    a. 原子的实例化对象，如：\[ *atom0, atom1, atom2* ];
    b. 原子的标准格式化数组，其格式为：\[元素名，坐标，坐标类型];
    c. 包含固定信息的原子的格式化数组，其格式为：\[元素名，坐标，坐标类型，固定信息]; 
    （注意：如果使用这里的信息，则不需要传入`constraints`参数）
*   `constraints: array-like` 原子固定信息，可以设置为以下形式：
    a. 单个bool值，如`True/False`，为所有输入原子设置相同的固定信息
    b. bool列表，长度与原子列表相同，为每个输入原子独立设置固定信息
    例如`[True,True,False,...]`（三方向固定信息相同）；
    或`[[True,True,False], [True,True,False], ...]`（三方向固定信息不同）
*   `isConstraint_of_remainder: bool, default: True` 是否更新未指定部分的原子固定信息
*   `constraint_of_remainder: bool/list, default: True` 用于指定未指定部分的原子固定信息


***getUnit(unit, tolerance=0.1, \*\*kwargs)***
获取指定区域的格式化原子信息。

*   `unit` 指定结构区域，其格式有两种：
    a. 沿着晶胞基矢的选取一定范围，格式为\[起点，终点，方向(0/1/2)]，其中0/1/2 分别代表x,y,z三个方向，
    如：\[0.234, 0.324, 2]
    b. 通过分别指定三个晶胞基矢方向的起始点，选中晶胞中的一个区域，其格式为3x2的数组，格式与示例如下：
          # 格式  [[x0, x1], [y0, y1], [z0, z1]]         
          # 示例  [[0.1, 0.2], [0.1, 0.2], [0.1, 0.2]]
    注意：只支持晶体结构对象，不可用于分子结构对象。
*   `tolerance: float, default: 0.1` 选取范围右侧边界处原子坐标的容差，其目的是选取原子在选取范围以外但是非常靠近右侧的原子（在一些情况下，原子存在微小扰动而偏离高对称位置，确保程序可以正确选中给定区域内的原子，避免调用该方法的其他结构操作方法，出现漏选或原子重叠现象的发生），单位为埃(Å)
*   `symbol_of_atoms: list, optional` 只选择在给定区域内的指定元素类型，其值为元素符号的列表数组，如\[ 'Na', 'Cl' ]

***removeUnit(unit, tolerance=0.1, isMoveAtoms=True, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
删除指定区域的原子。

*   `unit` 指定的范围，格式为\[起点，终点，方向(0/1/2)]，如：\[0.234, 0.324, 2]
    注意：只支持晶体结构对象，不可用于分子结构对象。
*   `tolerance: float, default: 0.1` 选取范围右侧边界处原子坐标的容差，其目的是选取原子在选取范围以外但是非常靠近右侧的原子（在一些情况下，原子存在微小扰动而偏离高对称位置，确保程序可以正确选中给定区域内的原子，避免调用该方法的其他结构操作方法，出现漏选或原子重叠现象的发生），单位为埃(Å)
*   `isMoveAtoms: bool, default: True` 删除指定区域的原子后，是否移动删除区域右侧的原子，填充移除单元之后的空位
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度
*   `isPersistLattice: bool, default: True`：是否在删除结构单原之后保持原有结构的晶胞参数。如果设为False，在删除结构单元后，晶胞基矢会沿着删除方向收缩相同长度的值

***addUnit(unit, nrepeat, tolerance=0.1, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
沿指定方向重复该区域内的结构单元。

*   `unit` 指定的范围，格式为\[起点，终点，方向(0/1/2)]，如：\[0.234, 0.324, 2]
    注意：只支持晶体结构对象，不可用于分子结构对象。
*   `nrepeat: int` 复制结构单元的次数。
*   `tolerance: float, default: 0.1` 选取范围右侧边界处原子坐标的容差，其目的是选取原子在选取范围以外但是非常靠近右侧的原子（在一些情况下，原子存在微小扰动而偏离高对称位置，确保程序可以正确选中给定区域内的原子，避免调用该方法的其他结构操作方法，出现漏选或原子重叠现象的发生），单位为埃(Å)
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度
*   `isPersistLattice: bool, default: True`：是否在删除结构单原之后保持原有结构的晶胞参数。如果设为False，在删除结构单元后，晶胞基矢会沿着删除方向收缩相同长度的值

***insertMolecule(structure\_of\_molecule, position\_in\_molecule, position, isUpdatedInfo=False, isPersist=False, \*\*kwargs)***
在晶体结构中插入分子。分别选取分子和晶体坐标系中一个参考点，计算两个参考点的距离差作为平移的矢量，实现在晶体中插入分子结构。
注意：只支持晶体结构对象，不可用于分子结构对象。

*   `structure_of_molecule` 分子的实例化对象
*   `position_in_molecule` 分子结构中的参考点，其格式为\[坐标, 'Cartesian']，如:
        [5.234, 0, 0, 'Cartesian']
*   `position` 晶体结构中的参考点，其格式为\[坐标，坐标类型]。例如：
        [0.1, 0, 0, 'Direct']
        [0.1, 0, 0]
        [5.234, 0.0, 0.0, 'Cartesian']
*   `isUpdatedInfo: bool, default: False`是否同步结构操作引起结构中其他关联信息的变化，如元素、化学式等
*   `isPersist: bool, default: Fasle` 是否保存结构到数据库中
*   `symprec: float, default: 1e-5` 寻找结构对称性时原子位置的误差精度
*   `angle_tolerance: float, default: -1.0` 寻找结构对称性时基矢间角度的误差精度

下面以构造二维四方相钙钛矿为例，演示结构操作函数的使用。

![sf](https://note.youdao.com/yws/api/personal/file/6C2876023B974361B114B9E9425DFAB7?method=download\&shareKey=5fd7ed3d8dd8abaa014339078f733e5f)

